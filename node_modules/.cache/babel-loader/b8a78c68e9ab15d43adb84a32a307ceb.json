{"ast":null,"code":"// Import the required dependencies for this class\nconst axios = require('axios'); // Require some helper functions\n\n\nconst Helpers = require('./helpers/index');\n/**\r\n * Steam Community Market class wrapper for fetching item prices, images and listings from the Steam Community Market.\r\n */\n\n\nclass SteamMarketFetcher {\n  /**\r\n   * Creates a new instance of the Steam Market Fetcher.\r\n   * @param { object } options An object containing valid constructor options.\r\n   * @param { string } options.currency Any currency used by the Steam Community Market, defaults to USD.\r\n   * @param { string } options.format Any data format accepted by Steam, defaults to JSON.\r\n   * @param { CSGOCdn } options.CDN Steam CDN handler for CS:GO items and their image URLs.\r\n   * @returns { SteamMarketFetcher } A fresh Steam Market Fetcher instance.\r\n  */\n  constructor(options) {\n    // Options for different user needs\n    options = options || {}; // The currency in which to return Steam Community Market prices\n\n    this.currency = Helpers.setCurrency(options.currency); // The format in which to return Steam Community Market data\n\n    this.format = Helpers.setDataFormat(options.format); // The CDN to use for CSGO items\n\n    this.CDN = Helpers.setCDN(options.CDN);\n  }\n  /**\r\n   * Get the Steam Community Market price from the listing matching the `market_hash_name` argument.\r\n   * @param { object } params An object of valid arguments for the `getItemPriceHistory` function. All are \"optional\" and have default values.\r\n   * @param { string } params.market_hash_name The marketable item's name.\r\n   * @param { number } params.appid The unique app to the item's market_hash name.\r\n   * @param { function } [params.callback] Optional, called when a response is available. If omitted the function returns a promise.\r\n   * @returns { Promise<object> | function } An object containing Steam Community price data matching the market_hash_name parameter.\r\n  */\n\n\n  getItemPrice() {\n    let {\n      market_hash_name = 'AK-47 | Redline (Field-Tested)',\n      appid = 730,\n      callback\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    // Type check the market_hash_name parameter for matching a string\n    if (typeof market_hash_name !== 'string' || market_hash_name.length === 0) {\n      // Throw an error in case the check failed\n      throw new Error('The \"market_hash_name\" parameter is not a valid string or missing.');\n    } // Type check the appid parameter for matching a number\n\n\n    if (typeof appid !== 'number') {\n      // Throw an error in case the check failed\n      throw new Error('The \"appid\" parameter is not a number or missing.');\n    } // Encode the Steam Community Market endpoint for handling items with unique characters in their market_hash_name\n\n\n    const endpoint = encodeURI(`http://steamcommunity.com/market/priceoverview/?market_hash_name=${market_hash_name}&appid=${appid}&currency=${this.currency}`); // Make a GET request to the endpoint matching the market_hash_name and appid parameters\n\n    return axios.get(endpoint).then(response => {\n      // Handle the callback parameter for returning the response object\n      if (typeof callback === 'function') {\n        // Return the callback with the response data\n        callback(null, response.data);\n      } // Return the response data as a Promise\n\n\n      return response.data;\n    }).catch(error => {\n      // Handle the callback parameter for returning the error\n      if (typeof callback === 'function') {\n        // Return the callback with the error\n        callback(error, null);\n      } else {\n        // Throw the error \n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Fetches an image from the first Steam Community market listing matching the `market_hash_name` argument.\r\n   * @param { object } params An object of valid arguments for the `getItemPriceHistory` function. All are \"optional\" and have default values.\r\n   * @param { string } params.market_hash_name The marketable item's name.\r\n   * @param { number } params.appid The unique app to the item's market_hash_name.\r\n   * @param { number } params.px The desired size of the item image in pixels, this is optional and defaults to 360px.\r\n   * @param { function } [params.callback] Optional, called when a response is available. If omitted the function returns a promise.\r\n   * @returns { Promise<string> | Function } A Steam Community or Steam CDN URL of the item image.\r\n  */\n\n\n  getItemImage() {\n    let {\n      market_hash_name = 'AK-47 | Redline (Field-Tested)',\n      appid = 730,\n      px = 360,\n      callback\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    // Type check the market_hash_name parameter for matching a string\n    if (typeof market_hash_name !== 'string' || market_hash_name.length === 0) {\n      // Throw an error in case the check failed\n      throw new Error('The \"market_hash_name\" parameter is not a valid string or missing.');\n    } // Type check the appid parameter for matching a number\n\n\n    if (typeof appid !== 'number') {\n      // Throw an error in case the check failed\n      throw new Error('The \"appid\" parameter is not a number or missing.');\n    } // Type check the px parameter for matching a number\n\n\n    if (typeof px !== 'number') {\n      // Throw an error in case the check failed\n      throw new Error('The \"px\" parameter is not a number or missing.');\n    } // Encode the Steam Community Market endpoint for handling items with unique characters in their market_hash_name\n\n\n    const endpoint = encodeURI(`http://steamcommunity.com/market/listings/${appid}/${market_hash_name}/render?start=0&count=1&currency=${this.currency}&format=${this.format}`); // Make a GET request to the endpoint matching the market_hash_name and appid parameters\n\n    return axios.get(endpoint).then(response => {\n      // Get the item image from a Steam Community listing or the Steam CDN\n      const listingImage = Helpers.getImageFromListing(this.CDN, market_hash_name, appid, response.data.results_html, px); // Handle the callback parameter for returning the response object\n\n      if (typeof callback === 'function') {\n        // Handle the callback parameter for returning the response object\n        callback(null, listingImage);\n      } // Return the image as a Promise\n\n\n      return listingImage;\n    }).catch(error => {\n      // Handle the callback parameter for returning the error\n      if (typeof callback === 'function') {\n        // Return the callback with the error\n        callback(error, null);\n      } else {\n        // Throw the error \n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Get an item's price history from the Steam Community listing matching the `market_hash_name` argument. \r\n   * @param { object } params An object of valid arguments for the `getItemPriceHistory` function. All are \"optional\" and have default values.\r\n   * @param { string } params.market_hash_name The marketable item's name.\r\n   * @param { number } params.appid The unique app to the item's market_hash_name.\r\n   * @param { string } params.cookie A steamLoginSecure cookie from Steam Community.com session.\r\n   * @param { function } [params.callback] Optional, called when a response is available. If omitted the function returns a promise. \r\n   * @returns { Promise<object> | Function } The price history for the item matching the parameters.\r\n  */\n\n\n  getItemPriceHistory() {\n    let {\n      market_hash_name = 'AK-47 | Redline (Field-Tested)',\n      appid = 730,\n      cookie,\n      callback\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    // Type check the market_hash_name parameter for matching a string\n    if (typeof market_hash_name !== 'string' || market_hash_name.length === 0) {\n      // Throw an error in case the check failed\n      throw new Error('The \"market_hash_name\" parameter is not a valid string or missing.');\n    } // Type check the appid parameter for matching a number\n\n\n    if (typeof appid !== 'number') {\n      // Throw an error in case the check failed\n      throw new Error('The \"appid\" parameter is not a number or missing.');\n    } // Type check the cookie parameter for matching a string\n\n\n    if (typeof cookie !== 'string' || cookie.length === 0) {\n      // Throw an error in case the check failed\n      throw new Error('The \"cookie\" parameter is not a string or missing.');\n    } // Encode the Steam Community Market endpoint for handling items with unique characters in their market_hash_name\n\n\n    const endpoint = encodeURI(`https://steamcommunity.com/market/pricehistory/?currency=${this.currency}&appid=${appid}&market_hash_name=${market_hash_name}`); // Make a GET request to the endpoint matching the market_hash_name and appid parameters\n\n    return axios.get(endpoint, {\n      headers: {\n        Cookie: `steamLoginSecure=${cookie}`\n      }\n    }).then(response => {\n      // Handle the callback parameter for returning the response object\n      if (typeof callback === 'function') {\n        // Return the callback with the response data\n        callback(null, response.data);\n      } // Return the response data as a Promise\n\n\n      return response.data;\n    }).catch(error => {\n      // Handle the callback parameter for returning the error\n      if (typeof callback === 'function') {\n        // Return the callback with the error\n        callback(error, null);\n      } else {\n        // Throw the error \n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Get the current Steam Community Market listings for any given Steam app. \r\n   * @param { object } params An object of valid arguments for the getMarketListings method. All are \"optional\" and have default values.\r\n   * @param { string } params.query The query value narrows down the search, optional parameter that defaults to none.\r\n   * @param { number } params.descriptions If set to 1, includes the query in the item's description property.\r\n   * @param { number } params.appid The app in which to fetch market listings for.\r\n   * @param { number } params.start The market listing from which to start the request, optional parameter that defaults to 0 (the first items listed on the market for that app).\r\n   * @param { function } [params.callback] Optional, called when a response is available. If omitted the function returns a promise.\r\n   * @returns { Promise<array> | Function } An array containg market listings matching the provided appid.\r\n  */\n\n\n  getMarketListings() {\n    let {\n      query = '',\n      descriptions = 0,\n      appid = 730,\n      start = 0,\n      callback\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    // Type check the query parameter for matching a string\n    if (typeof query !== 'string') {\n      // Throw an error in case the check failed\n      throw new Error('The \"query\" parameter is not a string or missing.');\n    } // Type check the descriptions parameter for matching a string\n\n\n    if (typeof descriptions !== 'number' || [0, 1].indexOf(descriptions) === -1) {\n      // Throw an error in case the check failed\n      throw new Error(`Unexpected value \"${descriptions}\" for the \"descriptions\" parameter. Expected a numeric integer between 0 and 1.`);\n    } // Type check the appid parameter for matching a number\n\n\n    if (typeof appid !== 'number') {\n      // Throw an error in case the check failed\n      throw new Error('The \"appid\" parameter is not a number or missing.');\n    } // Type check the start parameter\n\n\n    if (typeof start !== 'number' || !(start > -1)) {\n      throw new Error('The \"start\" parameter is an invalid number or missing.');\n    } //Encode the endpoint URL to prevent unescaped characters\n\n\n    const endpoint = encodeURI(`https://steamcommunity.com/market/search/render/?query=${query}&search_descriptions=${descriptions}&appid=${appid}&start=${start}&count=100&norender=1`); // Make a GET request to the endpoint matching the market_hash_name and appid parameters.\n\n    return axios.get(endpoint).then(response => {\n      // Handle the callback parameter for returning the response object\n      if (typeof callback === 'function') {\n        // Return the callback with the response data\n        callback(null, response.data.results);\n      } // Return the response data as a Promise\n\n\n      return response.data.results;\n    }).catch(error => {\n      // Handle the callback parameter for returning the error\n      if (typeof callback === 'function') {\n        // Return the callback with the error\n        callback(error, null);\n      } else {\n        // Throw the error \n        throw error;\n      }\n    });\n  }\n\n} // Export the SteamMarketFetcher Wrapper class\n\n\nmodule.exports = SteamMarketFetcher;","map":{"version":3,"names":["axios","require","Helpers","SteamMarketFetcher","constructor","options","currency","setCurrency","format","setDataFormat","CDN","setCDN","getItemPrice","market_hash_name","appid","callback","length","Error","endpoint","encodeURI","get","then","response","data","catch","error","getItemImage","px","listingImage","getImageFromListing","results_html","getItemPriceHistory","cookie","headers","Cookie","getMarketListings","query","descriptions","start","indexOf","results","module","exports"],"sources":["/home/daniil/github/steamApp/node_modules/steam-market-fetcher/index.js"],"sourcesContent":["// Import the required dependencies for this class\r\nconst axios = require('axios');\r\n\r\n// Require some helper functions\r\nconst Helpers = require('./helpers/index');\r\n\r\n/**\r\n * Steam Community Market class wrapper for fetching item prices, images and listings from the Steam Community Market.\r\n */\r\nclass SteamMarketFetcher {\r\n    /**\r\n     * Creates a new instance of the Steam Market Fetcher.\r\n     * @param { object } options An object containing valid constructor options.\r\n     * @param { string } options.currency Any currency used by the Steam Community Market, defaults to USD.\r\n     * @param { string } options.format Any data format accepted by Steam, defaults to JSON.\r\n     * @param { CSGOCdn } options.CDN Steam CDN handler for CS:GO items and their image URLs.\r\n     * @returns { SteamMarketFetcher } A fresh Steam Market Fetcher instance.\r\n    */\r\n    constructor (options) {\r\n        // Options for different user needs\r\n        options = options || {};\r\n\r\n        // The currency in which to return Steam Community Market prices\r\n        this.currency = Helpers.setCurrency(options.currency); \r\n\r\n        // The format in which to return Steam Community Market data\r\n        this.format = Helpers.setDataFormat(options.format);\r\n\r\n        // The CDN to use for CSGO items\r\n        this.CDN = Helpers.setCDN(options.CDN);\r\n    }\r\n    \r\n    /**\r\n     * Get the Steam Community Market price from the listing matching the `market_hash_name` argument.\r\n     * @param { object } params An object of valid arguments for the `getItemPriceHistory` function. All are \"optional\" and have default values.\r\n     * @param { string } params.market_hash_name The marketable item's name.\r\n     * @param { number } params.appid The unique app to the item's market_hash name.\r\n     * @param { function } [params.callback] Optional, called when a response is available. If omitted the function returns a promise.\r\n     * @returns { Promise<object> | function } An object containing Steam Community price data matching the market_hash_name parameter.\r\n    */\r\n    getItemPrice ({ market_hash_name = 'AK-47 | Redline (Field-Tested)', appid = 730, callback } = {}) {\r\n        // Type check the market_hash_name parameter for matching a string\r\n        if (typeof market_hash_name !== 'string' || market_hash_name.length === 0) {\r\n            // Throw an error in case the check failed\r\n            throw new Error('The \"market_hash_name\" parameter is not a valid string or missing.');\r\n        }\r\n\r\n        // Type check the appid parameter for matching a number\r\n        if (typeof appid !== 'number') {\r\n            // Throw an error in case the check failed\r\n            throw new Error('The \"appid\" parameter is not a number or missing.');\r\n        }\r\n\r\n        // Encode the Steam Community Market endpoint for handling items with unique characters in their market_hash_name\r\n        const endpoint = encodeURI(`http://steamcommunity.com/market/priceoverview/?market_hash_name=${market_hash_name}&appid=${appid}&currency=${this.currency}`);\r\n\r\n        // Make a GET request to the endpoint matching the market_hash_name and appid parameters\r\n        return axios.get(endpoint).then(response => {\r\n            // Handle the callback parameter for returning the response object\r\n            if (typeof callback === 'function') {\r\n                // Return the callback with the response data\r\n                callback(null, response.data);\r\n            }\r\n\r\n            // Return the response data as a Promise\r\n            return response.data;\r\n        }).catch(error => {\r\n            // Handle the callback parameter for returning the error\r\n            if (typeof callback === 'function') {\r\n                // Return the callback with the error\r\n                callback(error, null);\r\n            } else {\r\n                // Throw the error \r\n                throw error;\r\n            }            \r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetches an image from the first Steam Community market listing matching the `market_hash_name` argument.\r\n     * @param { object } params An object of valid arguments for the `getItemPriceHistory` function. All are \"optional\" and have default values.\r\n     * @param { string } params.market_hash_name The marketable item's name.\r\n     * @param { number } params.appid The unique app to the item's market_hash_name.\r\n     * @param { number } params.px The desired size of the item image in pixels, this is optional and defaults to 360px.\r\n     * @param { function } [params.callback] Optional, called when a response is available. If omitted the function returns a promise.\r\n     * @returns { Promise<string> | Function } A Steam Community or Steam CDN URL of the item image.\r\n    */\r\n    getItemImage ({ market_hash_name = 'AK-47 | Redline (Field-Tested)', appid = 730, px = 360, callback } = {}) {\r\n        // Type check the market_hash_name parameter for matching a string\r\n        if (typeof market_hash_name !== 'string' || market_hash_name.length === 0) {\r\n            // Throw an error in case the check failed\r\n            throw new Error('The \"market_hash_name\" parameter is not a valid string or missing.');\r\n        }\r\n\r\n        // Type check the appid parameter for matching a number\r\n        if (typeof appid !== 'number') {\r\n            // Throw an error in case the check failed\r\n            throw new Error('The \"appid\" parameter is not a number or missing.');\r\n        }\r\n\r\n        // Type check the px parameter for matching a number\r\n        if (typeof px !== 'number') {\r\n            // Throw an error in case the check failed\r\n            throw new Error('The \"px\" parameter is not a number or missing.');\r\n        }\r\n\r\n        // Encode the Steam Community Market endpoint for handling items with unique characters in their market_hash_name\r\n        const endpoint = encodeURI(`http://steamcommunity.com/market/listings/${appid}/${market_hash_name}/render?start=0&count=1&currency=${this.currency}&format=${this.format}`);\r\n\r\n        // Make a GET request to the endpoint matching the market_hash_name and appid parameters\r\n        return axios.get(endpoint).then(response => {\r\n            // Get the item image from a Steam Community listing or the Steam CDN\r\n            const listingImage = Helpers.getImageFromListing(this.CDN, market_hash_name, appid, response.data.results_html, px); \r\n\r\n            // Handle the callback parameter for returning the response object\r\n            if (typeof callback === 'function') {\r\n                // Handle the callback parameter for returning the response object\r\n                callback(null, listingImage);\r\n            }\r\n\r\n            // Return the image as a Promise\r\n            return listingImage;\r\n        }).catch(error => {\r\n            // Handle the callback parameter for returning the error\r\n            if (typeof callback === 'function') {\r\n                // Return the callback with the error\r\n                callback(error, null);\r\n            } else {\r\n                // Throw the error \r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get an item's price history from the Steam Community listing matching the `market_hash_name` argument. \r\n     * @param { object } params An object of valid arguments for the `getItemPriceHistory` function. All are \"optional\" and have default values.\r\n     * @param { string } params.market_hash_name The marketable item's name.\r\n     * @param { number } params.appid The unique app to the item's market_hash_name.\r\n     * @param { string } params.cookie A steamLoginSecure cookie from Steam Community.com session.\r\n     * @param { function } [params.callback] Optional, called when a response is available. If omitted the function returns a promise. \r\n     * @returns { Promise<object> | Function } The price history for the item matching the parameters.\r\n    */\r\n    getItemPriceHistory ({ market_hash_name = 'AK-47 | Redline (Field-Tested)', appid = 730, cookie, callback } = {}) {\r\n        // Type check the market_hash_name parameter for matching a string\r\n        if (typeof market_hash_name !== 'string' || market_hash_name.length === 0) {\r\n            // Throw an error in case the check failed\r\n            throw new Error('The \"market_hash_name\" parameter is not a valid string or missing.');\r\n        }\r\n\r\n        // Type check the appid parameter for matching a number\r\n        if (typeof appid !== 'number') {\r\n            // Throw an error in case the check failed\r\n            throw new Error('The \"appid\" parameter is not a number or missing.');\r\n        }\r\n\r\n        // Type check the cookie parameter for matching a string\r\n        if (typeof cookie !== 'string' || cookie.length === 0) {\r\n            // Throw an error in case the check failed\r\n            throw new Error('The \"cookie\" parameter is not a string or missing.');\r\n        }\r\n\r\n        // Encode the Steam Community Market endpoint for handling items with unique characters in their market_hash_name\r\n        const endpoint = encodeURI(`https://steamcommunity.com/market/pricehistory/?currency=${this.currency}&appid=${appid}&market_hash_name=${market_hash_name}`);\r\n\r\n        // Make a GET request to the endpoint matching the market_hash_name and appid parameters\r\n        return axios.get(endpoint, { headers: { Cookie: `steamLoginSecure=${cookie}` }}).then(response => {\r\n            // Handle the callback parameter for returning the response object\r\n            if (typeof callback === 'function') {\r\n                // Return the callback with the response data\r\n                callback(null, response.data);\r\n            }\r\n\r\n            // Return the response data as a Promise\r\n            return response.data;\r\n        }).catch(error => {\r\n            // Handle the callback parameter for returning the error\r\n            if (typeof callback === 'function') {\r\n                // Return the callback with the error\r\n                callback(error, null);\r\n            } else {\r\n                // Throw the error \r\n                throw error;\r\n            }            \r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the current Steam Community Market listings for any given Steam app. \r\n     * @param { object } params An object of valid arguments for the getMarketListings method. All are \"optional\" and have default values.\r\n     * @param { string } params.query The query value narrows down the search, optional parameter that defaults to none.\r\n     * @param { number } params.descriptions If set to 1, includes the query in the item's description property.\r\n     * @param { number } params.appid The app in which to fetch market listings for.\r\n     * @param { number } params.start The market listing from which to start the request, optional parameter that defaults to 0 (the first items listed on the market for that app).\r\n     * @param { function } [params.callback] Optional, called when a response is available. If omitted the function returns a promise.\r\n     * @returns { Promise<array> | Function } An array containg market listings matching the provided appid.\r\n    */\r\n    getMarketListings ({ query = '', descriptions = 0, appid = 730, start = 0, callback } = {}) {\r\n        // Type check the query parameter for matching a string\r\n        if (typeof query !== 'string') {\r\n            // Throw an error in case the check failed\r\n            throw new Error('The \"query\" parameter is not a string or missing.');\r\n        }\r\n\r\n        // Type check the descriptions parameter for matching a string\r\n        if (typeof descriptions !== 'number' || [0, 1].indexOf(descriptions) === -1) {\r\n            // Throw an error in case the check failed\r\n            throw new Error(`Unexpected value \"${descriptions}\" for the \"descriptions\" parameter. Expected a numeric integer between 0 and 1.`);\r\n        }\r\n\r\n        // Type check the appid parameter for matching a number\r\n        if (typeof appid !== 'number') {\r\n            // Throw an error in case the check failed\r\n            throw new Error('The \"appid\" parameter is not a number or missing.');\r\n        }\r\n\r\n        // Type check the start parameter\r\n        if (typeof start !== 'number' || !(start > -1)) {\r\n            throw new Error('The \"start\" parameter is an invalid number or missing.');\r\n        }\r\n\r\n        //Encode the endpoint URL to prevent unescaped characters\r\n        const endpoint = encodeURI(`https://steamcommunity.com/market/search/render/?query=${query}&search_descriptions=${descriptions}&appid=${appid}&start=${start}&count=100&norender=1`);\r\n\r\n        // Make a GET request to the endpoint matching the market_hash_name and appid parameters.\r\n        return axios.get(endpoint).then(response => {\r\n            // Handle the callback parameter for returning the response object\r\n            if (typeof callback === 'function') {\r\n                // Return the callback with the response data\r\n                callback(null, response.data.results);\r\n            }\r\n\r\n            // Return the response data as a Promise\r\n            return response.data.results;\r\n        }).catch(error => {\r\n            // Handle the callback parameter for returning the error\r\n            if (typeof callback === 'function') {\r\n                // Return the callback with the error\r\n                callback(error, null);\r\n            } else {\r\n                // Throw the error \r\n                throw error;\r\n            }            \r\n        });\r\n    }\r\n}\r\n\r\n// Export the SteamMarketFetcher Wrapper class\r\nmodule.exports = SteamMarketFetcher;"],"mappings":"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"},"metadata":{},"sourceType":"script"}