{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst crypto = require('crypto');\n\nconst isStream = require('is-stream');\n\nconst hasha = (input, opts) => {\n  opts = opts || {};\n  let outputEncoding = opts.encoding || 'hex';\n\n  if (outputEncoding === 'buffer') {\n    outputEncoding = undefined;\n  }\n\n  const hash = crypto.createHash(opts.algorithm || 'sha512');\n\n  const update = buf => {\n    const inputEncoding = typeof buf === 'string' ? 'utf8' : undefined;\n    hash.update(buf, inputEncoding);\n  };\n\n  if (Array.isArray(input)) {\n    input.forEach(update);\n  } else {\n    update(input);\n  }\n\n  return hash.digest(outputEncoding);\n};\n\nhasha.stream = opts => {\n  opts = opts || {};\n  let outputEncoding = opts.encoding || 'hex';\n\n  if (outputEncoding === 'buffer') {\n    outputEncoding = undefined;\n  }\n\n  const stream = crypto.createHash(opts.algorithm || 'sha512');\n  stream.setEncoding(outputEncoding);\n  return stream;\n};\n\nhasha.fromStream = (stream, opts) => {\n  if (!isStream(stream)) {\n    return Promise.reject(new TypeError('Expected a stream'));\n  }\n\n  opts = opts || {};\n  return new Promise((resolve, reject) => {\n    stream.on('error', reject).pipe(hasha.stream(opts)).on('error', reject).on('finish', function () {\n      resolve(this.read());\n    });\n  });\n};\n\nhasha.fromFile = (fp, opts) => hasha.fromStream(fs.createReadStream(fp), opts);\n\nhasha.fromFileSync = (fp, opts) => hasha(fs.readFileSync(fp), opts);\n\nmodule.exports = hasha;","map":{"version":3,"names":["fs","require","crypto","isStream","hasha","input","opts","outputEncoding","encoding","undefined","hash","createHash","algorithm","update","buf","inputEncoding","Array","isArray","forEach","digest","stream","setEncoding","fromStream","Promise","reject","TypeError","resolve","on","pipe","read","fromFile","fp","createReadStream","fromFileSync","readFileSync","module","exports"],"sources":["/home/daniil/github/steamApp/node_modules/hasha/index.js"],"sourcesContent":["'use strict';\nconst fs = require('fs');\nconst crypto = require('crypto');\nconst isStream = require('is-stream');\n\nconst hasha = (input, opts) => {\n\topts = opts || {};\n\n\tlet outputEncoding = opts.encoding || 'hex';\n\n\tif (outputEncoding === 'buffer') {\n\t\toutputEncoding = undefined;\n\t}\n\n\tconst hash = crypto.createHash(opts.algorithm || 'sha512');\n\n\tconst update = buf => {\n\t\tconst inputEncoding = typeof buf === 'string' ? 'utf8' : undefined;\n\t\thash.update(buf, inputEncoding);\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput.forEach(update);\n\t} else {\n\t\tupdate(input);\n\t}\n\n\treturn hash.digest(outputEncoding);\n};\n\nhasha.stream = opts => {\n\topts = opts || {};\n\n\tlet outputEncoding = opts.encoding || 'hex';\n\n\tif (outputEncoding === 'buffer') {\n\t\toutputEncoding = undefined;\n\t}\n\n\tconst stream = crypto.createHash(opts.algorithm || 'sha512');\n\tstream.setEncoding(outputEncoding);\n\treturn stream;\n};\n\nhasha.fromStream = (stream, opts) => {\n\tif (!isStream(stream)) {\n\t\treturn Promise.reject(new TypeError('Expected a stream'));\n\t}\n\n\topts = opts || {};\n\n\treturn new Promise((resolve, reject) => {\n\t\tstream\n\t\t\t.on('error', reject)\n\t\t\t.pipe(hasha.stream(opts))\n\t\t\t.on('error', reject)\n\t\t\t.on('finish', function () {\n\t\t\t\tresolve(this.read());\n\t\t\t});\n\t});\n};\n\nhasha.fromFile = (fp, opts) => hasha.fromStream(fs.createReadStream(fp), opts);\n\nhasha.fromFileSync = (fp, opts) => hasha(fs.readFileSync(fp), opts);\n\nmodule.exports = hasha;\n"],"mappings":"AAAA;;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAxB;;AAEA,MAAMG,KAAK,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;EAC9BA,IAAI,GAAGA,IAAI,IAAI,EAAf;EAEA,IAAIC,cAAc,GAAGD,IAAI,CAACE,QAAL,IAAiB,KAAtC;;EAEA,IAAID,cAAc,KAAK,QAAvB,EAAiC;IAChCA,cAAc,GAAGE,SAAjB;EACA;;EAED,MAAMC,IAAI,GAAGR,MAAM,CAACS,UAAP,CAAkBL,IAAI,CAACM,SAAL,IAAkB,QAApC,CAAb;;EAEA,MAAMC,MAAM,GAAGC,GAAG,IAAI;IACrB,MAAMC,aAAa,GAAG,OAAOD,GAAP,KAAe,QAAf,GAA0B,MAA1B,GAAmCL,SAAzD;IACAC,IAAI,CAACG,MAAL,CAAYC,GAAZ,EAAiBC,aAAjB;EACA,CAHD;;EAKA,IAAIC,KAAK,CAACC,OAAN,CAAcZ,KAAd,CAAJ,EAA0B;IACzBA,KAAK,CAACa,OAAN,CAAcL,MAAd;EACA,CAFD,MAEO;IACNA,MAAM,CAACR,KAAD,CAAN;EACA;;EAED,OAAOK,IAAI,CAACS,MAAL,CAAYZ,cAAZ,CAAP;AACA,CAvBD;;AAyBAH,KAAK,CAACgB,MAAN,GAAed,IAAI,IAAI;EACtBA,IAAI,GAAGA,IAAI,IAAI,EAAf;EAEA,IAAIC,cAAc,GAAGD,IAAI,CAACE,QAAL,IAAiB,KAAtC;;EAEA,IAAID,cAAc,KAAK,QAAvB,EAAiC;IAChCA,cAAc,GAAGE,SAAjB;EACA;;EAED,MAAMW,MAAM,GAAGlB,MAAM,CAACS,UAAP,CAAkBL,IAAI,CAACM,SAAL,IAAkB,QAApC,CAAf;EACAQ,MAAM,CAACC,WAAP,CAAmBd,cAAnB;EACA,OAAOa,MAAP;AACA,CAZD;;AAcAhB,KAAK,CAACkB,UAAN,GAAmB,CAACF,MAAD,EAASd,IAAT,KAAkB;EACpC,IAAI,CAACH,QAAQ,CAACiB,MAAD,CAAb,EAAuB;IACtB,OAAOG,OAAO,CAACC,MAAR,CAAe,IAAIC,SAAJ,CAAc,mBAAd,CAAf,CAAP;EACA;;EAEDnB,IAAI,GAAGA,IAAI,IAAI,EAAf;EAEA,OAAO,IAAIiB,OAAJ,CAAY,CAACG,OAAD,EAAUF,MAAV,KAAqB;IACvCJ,MAAM,CACJO,EADF,CACK,OADL,EACcH,MADd,EAEEI,IAFF,CAEOxB,KAAK,CAACgB,MAAN,CAAad,IAAb,CAFP,EAGEqB,EAHF,CAGK,OAHL,EAGcH,MAHd,EAIEG,EAJF,CAIK,QAJL,EAIe,YAAY;MACzBD,OAAO,CAAC,KAAKG,IAAL,EAAD,CAAP;IACA,CANF;EAOA,CARM,CAAP;AASA,CAhBD;;AAkBAzB,KAAK,CAAC0B,QAAN,GAAiB,CAACC,EAAD,EAAKzB,IAAL,KAAcF,KAAK,CAACkB,UAAN,CAAiBtB,EAAE,CAACgC,gBAAH,CAAoBD,EAApB,CAAjB,EAA0CzB,IAA1C,CAA/B;;AAEAF,KAAK,CAAC6B,YAAN,GAAqB,CAACF,EAAD,EAAKzB,IAAL,KAAcF,KAAK,CAACJ,EAAE,CAACkC,YAAH,CAAgBH,EAAhB,CAAD,EAAsBzB,IAAtB,CAAxC;;AAEA6B,MAAM,CAACC,OAAP,GAAiBhC,KAAjB"},"metadata":{},"sourceType":"script"}