{"ast":null,"code":"\"use strict\";\n\nvar crc = require('crc');\n\nvar fs = require('fs');\n\nvar jBinary = require('jbinary');\n\nvar path = require('path');\n\nlet TYPESET = {\n  'jBinary.littleEndian': true,\n  vpkHeader: jBinary.Type({\n    read: function () {\n      let header = {};\n      let signature = this.binary.read('uint32');\n\n      if (signature !== 0x55aa1234) {\n        throw new Error('VPK signature is invalid');\n      }\n\n      header.version = this.binary.read('uint32');\n\n      if (header.version !== 1 && header.version !== 2) {\n        throw new Error('VPK version is invalid');\n      }\n\n      header.treeLength = this.binary.read('uint32');\n\n      if (header.version === 2) {\n        header.unknown1 = this.binary.read('uint32');\n        header.footerLength = this.binary.read('uint32');\n        header.unknown3 = this.binary.read('uint32');\n        header.unknown4 = this.binary.read('uint32');\n      }\n\n      return header;\n    }\n  }),\n  vpkDirectoryEntry: jBinary.Type({\n    read: function () {\n      let entry = this.binary.read({\n        crc: 'uint32',\n        preloadBytes: 'uint16',\n        archiveIndex: 'uint16',\n        entryOffset: 'uint32',\n        entryLength: 'uint32'\n      });\n      let terminator = this.binary.read('uint16');\n\n      if (terminator !== 0xffff) {\n        throw new Error('directory terminator is invalid');\n      }\n\n      return entry;\n    }\n  }),\n  vpkTree: jBinary.Type({\n    read: function () {\n      let files = {};\n\n      while (true) {\n        let extension = this.binary.read('string0');\n\n        if (extension === '') {\n          break;\n        }\n\n        while (true) {\n          let directory = this.binary.read('string0');\n\n          if (directory === '') {\n            break;\n          }\n\n          while (true) {\n            let filename = this.binary.read('string0');\n\n            if (filename === '') {\n              break;\n            }\n\n            let fullPath = filename;\n\n            if (fullPath === ' ') {\n              fullPath = '';\n            }\n\n            if (extension !== ' ') {\n              fullPath += '.' + extension;\n            }\n\n            if (directory !== ' ') {\n              fullPath = directory + '/' + fullPath;\n            }\n\n            let entry = this.binary.read('vpkDirectoryEntry');\n            entry.preloadOffset = this.binary.tell();\n            this.binary.skip(entry.preloadBytes);\n            files[fullPath] = entry;\n          }\n        }\n      }\n\n      return files;\n    }\n  })\n};\nlet HEADER_1_LENGTH = 12;\nlet HEADER_2_LENGTH = 28;\nlet MAX_PATH = 260;\n\nclass VPK {\n  constructor(path) {\n    this.directoryPath = path;\n  }\n\n  isValid() {\n    let header = new Buffer(HEADER_2_LENGTH);\n    let directoryFile = fs.openSync(this.directoryPath, 'r');\n    fs.readSync(directoryFile, header, 0, HEADER_2_LENGTH, 0);\n    let binary = new jBinary(header, TYPESET);\n\n    try {\n      binary.read('vpkHeader');\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  load() {\n    let binary = new jBinary(fs.readFileSync(this.directoryPath), TYPESET);\n    this.header = binary.read('vpkHeader');\n    this.tree = binary.read('vpkTree');\n  }\n\n  get files() {\n    return Object.keys(this.tree);\n  }\n\n  getFile(path) {\n    let entry = this.tree[path];\n\n    if (!entry) {\n      return null;\n    }\n\n    let file = new Buffer(entry.preloadBytes + entry.entryLength);\n\n    if (entry.preloadBytes > 0) {\n      let directoryFile = fs.openSync(this.directoryPath, 'r');\n      fs.readSync(directoryFile, file, 0, entry.preloadBytes, entry.preloadOffset);\n    }\n\n    if (entry.entryLength > 0) {\n      if (entry.archiveIndex === 0x7fff) {\n        let offset = this.header.treeLength;\n\n        if (this.header.version === 1) {\n          offset += HEADER_1_LENGTH;\n        } else if (this.header.version === 2) {\n          offset += HEADER_2_LENGTH;\n        }\n\n        let directoryFile = fs.openSync(this.directoryPath, 'r');\n        fs.readSync(directoryFile, file, entry.preloadBytes, entry.entryLength, offset + entry.entryOffset);\n      } else {\n        let fileIndex = ('000' + entry.archiveIndex).slice(-3);\n        let archivePath = this.directoryPath.replace(/_dir\\.vpk$/, '_' + fileIndex + '.vpk');\n        let archiveFile = fs.openSync(archivePath, 'r');\n        fs.readSync(archiveFile, file, entry.preloadBytes, entry.entryLength, entry.entryOffset);\n      }\n    }\n\n    if (crc.crc32(file) !== entry.crc) {\n      throw new Error('CRC does not match');\n    }\n\n    return file;\n  }\n\n}\n\nmodule.exports = VPK;","map":{"version":3,"names":["crc","require","fs","jBinary","path","TYPESET","vpkHeader","Type","read","header","signature","binary","Error","version","treeLength","unknown1","footerLength","unknown3","unknown4","vpkDirectoryEntry","entry","preloadBytes","archiveIndex","entryOffset","entryLength","terminator","vpkTree","files","extension","directory","filename","fullPath","preloadOffset","tell","skip","HEADER_1_LENGTH","HEADER_2_LENGTH","MAX_PATH","VPK","constructor","directoryPath","isValid","Buffer","directoryFile","openSync","readSync","e","load","readFileSync","tree","Object","keys","getFile","file","offset","fileIndex","slice","archivePath","replace","archiveFile","crc32","module","exports"],"sources":["/home/daniil/github/steamApp/node_modules/vpk/index.js"],"sourcesContent":["\"use strict\";\r\n\r\nvar crc = require('crc');\r\nvar fs = require('fs');\r\nvar jBinary = require('jbinary');\r\nvar path = require('path');\r\n\r\nlet TYPESET = {\r\n    'jBinary.littleEndian': true,\r\n    vpkHeader: jBinary.Type({\r\n        read: function() {\r\n            let header = {};\r\n\r\n            let signature = this.binary.read('uint32');\r\n            if (signature !== 0x55aa1234) {\r\n                throw new Error('VPK signature is invalid');\r\n            }\r\n\r\n            header.version = this.binary.read('uint32');\r\n            if (header.version !== 1 && header.version !== 2) {\r\n                throw new Error('VPK version is invalid');\r\n            }\r\n\r\n            header.treeLength = this.binary.read('uint32');\r\n\r\n            if (header.version === 2) {\r\n                header.unknown1 = this.binary.read('uint32');\r\n                header.footerLength = this.binary.read('uint32');\r\n                header.unknown3 = this.binary.read('uint32');\r\n                header.unknown4 = this.binary.read('uint32');\r\n            }\r\n\r\n            return header;\r\n        }\r\n    }),\r\n    vpkDirectoryEntry: jBinary.Type({\r\n        read: function() {\r\n            let entry = this.binary.read({\r\n                crc: 'uint32',\r\n                preloadBytes: 'uint16',\r\n                archiveIndex: 'uint16',\r\n                entryOffset: 'uint32',\r\n                entryLength: 'uint32'\r\n            });\r\n\r\n            let terminator = this.binary.read('uint16');\r\n            if (terminator !== 0xffff) {\r\n                throw new Error('directory terminator is invalid');\r\n            }\r\n\r\n            return entry;\r\n        }\r\n    }),\r\n    vpkTree: jBinary.Type({\r\n        read: function() {\r\n            let files = {};\r\n\r\n            while (true) {\r\n                let extension = this.binary.read('string0');\r\n\r\n                if (extension === '') {\r\n                    break;\r\n                }\r\n\r\n                while (true) {\r\n                    let directory = this.binary.read('string0');\r\n\r\n                    if (directory === '') {\r\n                        break;\r\n                    }\r\n\r\n                    while (true) {\r\n                        let filename = this.binary.read('string0');\r\n\r\n                        if (filename === '') {\r\n                            break;\r\n                        }\r\n\r\n                        let fullPath = filename;\r\n                        if (fullPath === ' ') {\r\n                            fullPath = '';\r\n                        }\r\n                        if (extension !== ' ') {\r\n                            fullPath += '.' + extension;\r\n                        }\r\n                        if (directory !== ' ') {\r\n                            fullPath = directory + '/' + fullPath;\r\n                        }\r\n\r\n                        let entry = this.binary.read('vpkDirectoryEntry');\r\n                        entry.preloadOffset = this.binary.tell();\r\n\r\n                        this.binary.skip(entry.preloadBytes);\r\n\r\n                        files[fullPath] = entry;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return files;\r\n        }\r\n    })\r\n};\r\n\r\nlet HEADER_1_LENGTH = 12;\r\nlet HEADER_2_LENGTH = 28;\r\n\r\nlet MAX_PATH = 260;\r\n\r\nclass VPK {\r\n    constructor(path) {\r\n        this.directoryPath = path;\r\n    }\r\n\r\n    isValid() {\r\n        let header = new Buffer(HEADER_2_LENGTH);\r\n        let directoryFile = fs.openSync(this.directoryPath, 'r');\r\n        fs.readSync(directoryFile, header, 0, HEADER_2_LENGTH, 0);\r\n        let binary = new jBinary(header, TYPESET);\r\n\r\n        try {\r\n            binary.read('vpkHeader');\r\n\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    load() {\r\n        let binary = new jBinary(fs.readFileSync(this.directoryPath), TYPESET);\r\n\r\n        this.header = binary.read('vpkHeader');\r\n        this.tree = binary.read('vpkTree');\r\n    }\r\n\r\n    get files() {\r\n        return Object.keys(this.tree);\r\n    }\r\n\r\n    getFile(path) {\r\n        let entry = this.tree[path];\r\n\r\n        if (!entry) {\r\n            return null;\r\n        }\r\n\r\n        let file = new Buffer(entry.preloadBytes + entry.entryLength);\r\n\r\n        if (entry.preloadBytes > 0) {\r\n            let directoryFile = fs.openSync(this.directoryPath, 'r');\r\n            fs.readSync(directoryFile, file, 0, entry.preloadBytes, entry.preloadOffset);\r\n        }\r\n\r\n        if (entry.entryLength > 0) {\r\n            if (entry.archiveIndex === 0x7fff) {\r\n                let offset = this.header.treeLength;\r\n\r\n                if (this.header.version === 1) {\r\n                    offset += HEADER_1_LENGTH;\r\n                }\r\n                else if (this.header.version === 2) {\r\n                    offset += HEADER_2_LENGTH;\r\n                }\r\n\r\n                let directoryFile = fs.openSync(this.directoryPath, 'r');\r\n                fs.readSync(directoryFile, file, entry.preloadBytes, entry.entryLength, offset + entry.entryOffset);\r\n            }\r\n            else {\r\n                let fileIndex = ('000' + entry.archiveIndex).slice(-3);\r\n                let archivePath = this.directoryPath.replace(/_dir\\.vpk$/, '_' + fileIndex + '.vpk');\r\n\r\n                let archiveFile = fs.openSync(archivePath, 'r');\r\n                fs.readSync(archiveFile, file, entry.preloadBytes, entry.entryLength, entry.entryOffset);\r\n            }\r\n        }\r\n\r\n        if (crc.crc32(file) !== entry.crc) {\r\n            throw new Error('CRC does not match');\r\n        }\r\n\r\n        return file;\r\n    }\r\n}\r\n\r\nmodule.exports = VPK;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}